# Custom values for Prometheus stack
global:
  evaluation_interval: 1m
  scrape_interval: 15s
  scrape_timeout: 10s

prometheusOperator:
  enabled: true
  createCustomResource: true

prometheus:
  enabled: true
  serviceAccount:
    create: true
    name: prometheus
  serviceMonitor:
    enabled: true
  prometheusSpec:
    replicas: 1
    retention: 10d
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    additionalScrapeConfigs:
      - job_name: 'easyshop'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - easyshop-dev
                - easyshop-staging
                - easyshop-prod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job', 'alertname', 'severity']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack'
      routes:
      - match:
          alertname: Watchdog
        receiver: 'null'
      - match:
          severity: critical
        receiver: 'slack'
        continue: true
    receivers:
    - name: 'null'
    - name: 'slack'
      slack_configs:
      - api_url: 'https://hooks.slack.com/services/replace-with-your-webhook'
        channel: '#alerts'
        send_resolved: true
        title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
        text: >-
          {{ range .Alerts }}
            *Alert:* {{ .Annotations.summary }}
            *Description:* {{ .Annotations.description }}
            *Severity:* {{ .Labels.severity }}
            *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}

grafana:
  enabled: true
  adminPassword: "prom-operator"
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - grafana.easyshop.local
  persistence:
    enabled: true
    size: 5Gi
  plugins:
    - grafana-piechart-panel
    - grafana-worldmap-panel
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      node-exporter:
        gnetId: 1860
        revision: 21
        datasource: Prometheus
      kubernetes-cluster:
        gnetId: 15661
        revision: 1
        datasource: Prometheus
      mongodb:
        gnetId: 2583
        revision: 1
        datasource: Prometheus
      easyshop-dashboard:
        url: https://raw.githubusercontent.com/yourusername/easyshop-dashboards/main/easyshop-dashboard.json

nodeExporter:
  enabled: true
  serviceMonitor:
    enabled: true

kubelet:
  enabled: true
  serviceMonitor:
    enabled: true

kubeApiServer:
  enabled: true
  serviceMonitor:
    enabled: true

kubeControllerManager:
  enabled: true
  endpoints: []

kubeScheduler:
  enabled: true
  endpoints: []

kubeProxy:
  enabled: true
  endpoints: []

kubeEtcd:
  enabled: true
  endpoints: [] 